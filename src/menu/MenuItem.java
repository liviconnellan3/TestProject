/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package menu;

import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.Icon;

/**
 *
 * @author User
 */
public class MenuItem extends javax.swing.JPanel {
    /**
     * indicates is the menu is currently showing or not
     */
  public boolean isShowing() {
        return showing;
    }
    /**
     * indicates is the menu is currently showing or not
     */
    public void setShowing(boolean showing) {
        this.showing = showing;
    }

    /**
     * @return the submenu
     */
    public ArrayList<MenuItem> getSubmenu() {
        return submenu;
    }
   

    /**
     * initialises an  array list of sub menus 
     * create an Action Listener called act
     */
    private final ArrayList<MenuItem> submenu = new ArrayList<>();
    private ActionListener act;

    /**
     * Creates  MenuItem which takes in an icon, menu name, action, and menu item as parameters
     *  set the icon and menu label text provided on the menu panel
     * and assign the action given to 'act'
     *  set the dimensions of the component
     *  loops through the the submenus array and adds them to that menu option without displaying them
     */
    public MenuItem(Icon icon, String menuName, ActionListener act, MenuItem... submenu) {
        initComponents();
        lblIcon.setIcon(icon);
        lblName.setText(menuName);

        if (act != null) {
            this.act = act;
        }
        
        this.setSize(new Dimension(Integer.MAX_VALUE, 45));
        this.setMaximumSize(new Dimension(Integer.MAX_VALUE, 45));
        this.setMinimumSize(new Dimension(Integer.MAX_VALUE, 45));

        for (int i = 0; i < submenu.length; i++) {
            this.submenu.add(submenu[i]);
            submenu[i].setVisible(false);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        lblIcon = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jSeparator1))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 163, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
private boolean showing = false;

    /**
     * when this menu item is clicked, it will check if the submenus are already
     * shown and will hide them or if they arent shown it will show the submenus
     * it will then trigger the action associated if there is one
     */
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (isShowing()) {
            hideMenu();

        } else {
            showMenu();

        }
        if (act != null) {
            act.actionPerformed(null);
        } else {
        }
    }//GEN-LAST:event_formMousePressed
    /**
     * this creates a new Thread that will loop through all the submenus in that
     * menu and display them it will then update the appearance and layout of
     * the container
     */
    private void showMenu() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i < submenu.size(); i++) {
                    sleep();
                    submenu.get(i).setVisible(true);
                }
                showing = true;
                getParent().repaint();
                getParent().revalidate();
            }
        }).start();

    }

    /**
     * this creates a new Thread that will loop through all the submenus in that
     * menu and make them not visible it will then update the appearance and
     * layout of the container
     */
    private void hideMenu() {
        new Thread(new Runnable() {
            @Override
            public void run() {

                for (int i = 0; i < submenu.size(); i++) {
                    sleep();
                    submenu.get(i).setVisible(false);

                    submenu.get(i).hideMenu();
                }
                showing = false;
                getParent().repaint();
                getParent().revalidate();

            }
        }).start();

    }

    /**
     * makes a short delay in the execution to ensure a smooth transition
     */
    private void sleep() {
        try {
            Thread.sleep(20);
        } catch (Exception e) {
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblName;
    // End of variables declaration//GEN-END:variables
}
