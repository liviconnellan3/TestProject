/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package matricproject;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class ViewUpcomingEvents extends javax.swing.JFrame {

    private ArrayList<Event> events;
    private int selected;

    /**
     * Creates new form ViewEvents
     */
    public ViewUpcomingEvents() {
        initComponents();
        refreshUI();
    }

    public void populateTable() {
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0);
        DataHandler dh = new DataHandler();
        events = dh.getAllUpcomingEvents();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        for (Event event : dh.getAllUpcomingEvents()) {
            tableModel.addRow(new Object[]{event.getEventid(), event.getSport(), event.getDate().format(formatter), event.getTeamA(), event.getTeamB(),
                dh.calculatingOddsA(event), dh.calculatingOddsB(event), dh.calculatingDraw(event)});
        }

        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = jTable1.getSelectedRow();
                    if (selectedRow != -1) { // If a row is actually selected
                        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

                        // Assuming your label is lblSelectedInfo
//                        String id = tableModel.getValueAt(selectedRow, 0) + "";
//                        txteventid.setText(id);
                        String s = tableModel.getValueAt(selectedRow, 1) + "";
                        txtsport.setText(s);

                        String d = tableModel.getValueAt(selectedRow, 2) + "";
                        LocalDate date = LocalDate.parse(d);
                        datePick.setDate(date);

                        String a = tableModel.getValueAt(selectedRow, 3) + "";
                        txtteama.setText(a);

                        String b = tableModel.getValueAt(selectedRow, 4) + "";
                        txtteamb.setText(b);

                    }
                }
            }
        });

    }

    private void refreshUI() {
//      jTable1.removeAll();

        this.populateTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtsport = new javax.swing.JTextField();
        datePick = new com.github.lgooddatepicker.components.DatePicker();
        txtteama = new javax.swing.JTextField();
        txtteamb = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnedit = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Event ID", "Sport", "Date", "Team A", "Team B", "Odds Team A", "Odds Team B", "Odds Draw"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 710, 300));

        txtsport.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        getContentPane().add(txtsport, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 440, 100, 25));
        getContentPane().add(datePick, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 470, 130, 20));

        txtteama.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        getContentPane().add(txtteama, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 440, 100, 25));

        txtteamb.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        getContentPane().add(txtteamb, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 470, 100, 25));

        jLabel3.setText("Team A");
        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 440, 70, 20));

        jLabel4.setText("Team B");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 470, 80, 20));

        jLabel5.setText("Date");
        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 470, 40, -1));

        jButton1.setText("Back");
        jButton1.setBackground(new java.awt.Color(255, 255, 254));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(852, 521, -1, -1));

        btndelete.setText("Delete");
        btndelete.setBackground(new java.awt.Color(255, 255, 254));
        btndelete.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btndelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 470, 80, -1));

        btnedit.setText("Edit");
        btnedit.setBackground(new java.awt.Color(255, 255, 254));
        btnedit.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneditActionPerformed(evt);
            }
        });
        getContentPane().add(btnedit, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 440, 80, -1));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 60)); // NOI18N
        jLabel7.setText("Upcoming Events");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, 480, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        jLabel6.setText("Sport");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 440, 100, -1));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 750, 460));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matricproject/sport.jpg"))); // NOI18N
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-50, 0, 980, 550));

        setSize(new java.awt.Dimension(946, 558));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Admin br = new Admin();
        br.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        DataHandler dh = new DataHandler();
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Must select an event", "Connot delete event", JOptionPane.ERROR_MESSAGE);

        } else {

            int eventID = (int) tableModel.getValueAt(selectedRow, 0);
            String sport = "" + tableModel.getValueAt(selectedRow, 1);
            String date1 = tableModel.getValueAt(selectedRow, 2) + "";
            LocalDate date = LocalDate.parse(date1);
            String TA = "" + tableModel.getValueAt(selectedRow, 3);
            String TB = "" + tableModel.getValueAt(selectedRow, 4);
            Event ee = new Event(eventID, sport, date, TA, TB);

            if (dh.getAllBetsForEvent(ee).isEmpty() == false) {
                JOptionPane.showMessageDialog(this, "Connot delete event\n"
                        + "as bets have already been made", "Cannot delete event", JOptionPane.ERROR_MESSAGE);

            } else {
                dh.deleteEvent(ee);
                refreshUI();
            }

        }

//      
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        DataHandler dh = new DataHandler();
        int selectedRow = jTable1.getSelectedRow();

        String error = "";
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Must select an event", "Connot update event", JOptionPane.ERROR_MESSAGE);

        } else {
            int eventID = (int) tableModel.getValueAt(selectedRow, 0);
            String sportt = "" + tableModel.getValueAt(selectedRow, 1);
            String date1 = tableModel.getValueAt(selectedRow, 2) + "";
            LocalDate datee = LocalDate.parse(date1);
            String TA = "" + tableModel.getValueAt(selectedRow, 3);
            String TB = "" + tableModel.getValueAt(selectedRow, 4);
            Event ee = new Event(eventID, sportt, datee, TA, TB);

            if (txtsport.getText().equalsIgnoreCase(sportt)
                    && txtteama.getText().equalsIgnoreCase(TA)
                    && txtteamb.getText().equalsIgnoreCase(TB)
                    && datePick.getDate().equals(datee)) {
                JOptionPane.showMessageDialog(this, "No change made", "Connot update event", JOptionPane.ERROR_MESSAGE);

            } else {
                if (txtteama.getText().equalsIgnoreCase(txtteamb.getText())) {
                    error += "Must select two different teams" + "\n";
                }
                if (datePick.getDate().isBefore(LocalDate.now())) {
                    error += "Date must be in the future" + "\n";
                }
                if (dh.checkSportInput(txtsport.getText()) == false) {
                    error += "Incorrect sport entered" + "\n";
                }
                if (dh.checkTeamInput(txtteama.getText()) == false || dh.checkTeamInput(txtteamb.getText()) == false) {
                    error += "Incorrect team entered" + "\n";
                }

                if (error.isBlank() == false) {
                    JOptionPane.showMessageDialog(this, error, "Connot update event", JOptionPane.ERROR_MESSAGE);

                } if (dh.getAllBetsForEvent(ee).isEmpty() == false) {
                JOptionPane.showMessageDialog(this, "Connot delete event\n"
                        + "as bets have already been made", "Cannot delete event", JOptionPane.ERROR_MESSAGE);

            }else {

                    String sport = txtsport.getText();
                    LocalDate date = datePick.getDate();
                    String a = txtteama.getText();
                    String b = txtteamb.getText();
                    Event e = new Event(eventID, sport, date, a, b);

                    dh.updateEvent(e);
                    refreshUI();
                }

            }

        }


    }//GEN-LAST:event_btnEditActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewUpcomingEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewUpcomingEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewUpcomingEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewUpcomingEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewUpcomingEvents().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnedit;
    private com.github.lgooddatepicker.components.DatePicker datePick;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtsport;
    private javax.swing.JTextField txtteama;
    private javax.swing.JTextField txtteamb;
    // End of variables declaration//GEN-END:variables
}
